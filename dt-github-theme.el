(deftheme dt-github)
(let
  ((fg1       "#e1e4e8")
    (fg2      "#d1d5da")
    (fg3      "#bdc0c3")
    (fg4      "#444d56")
    (fg5      "#bfcde5")
    (bg1      "#24292e")
    (bg2      "#2f363d")
    (bg3      "#39414a")
    (bg4      "#444d56")
    (builtin  "#79b8ff")
    (keyword  "#f97583")
    (const    "#e1e4e8")
    (comment  "#88be65")
    (func     "#b392f0")
    (str      "#88be65")
    (type     "#b392f0")
    (var      "#e1e4e8")
    (warning  "#ffea7f")
    (warning2 "#ffab70"))

  (custom-theme-set-faces
    'dt-github
    `(ac-completion-face ((t (:underline t :foreground ,keyword))))
    `(ag-hit-face ((t (:foreground ,builtin))))
    `(bm-face ((t (:background ,bg2, :bold t))))
    `(bm-fringe-face ((t (:background ,bg2, :bold t))))
    `(bm-fringe-persistent-face ((t (:background ,bg2, :bold t))))
    `(bm-persistent-face ((t (:background ,bg2, :bold t))))
    `(company-echo-common ((t (:foreground ,bg1 :background ,fg1))))
    `(company-preview ((t (:background ,bg1 :foreground ,var))))
    `(company-preview-common ((t (:foreground ,bg2 :foreground ,fg3))))
    `(company-preview-search ((t (:foreground ,type :background ,bg1))))
    `(company-scrollbar-bg ((t (:background ,bg3))))
    `(company-scrollbar-fg ((t (:foreground ,keyword))))
    `(company-template-field ((t (:inherit region))))
    `(company-tooltip ((t (:foreground ,fg2 :background ,bg1 :bold t))))
    `(company-tooltip-common ((t (list  :foreground ,fg3))))
    `(company-tooltip-common-selection ((t (:foreground ,str))))
    `(company-tooltip-mouse ((t (:inherit highlight))))
    `(company-tooltip-selection ((t (:background ,bg3 :foreground ,fg3))))
    `(company-tooltop-annotation ((t (:foreground ,const))))
    `(compilation-column-number ((t (:foreground ,fg1))))
    `(compilation-info ((t (:foreground ,builtin))))
    `(compilation-line-number ((t (:foreground ,fg1))))
    `(compilation-mode-line-fail ((t (:foreground ,keyword))))
    `(cursor ((t (:background ,fg2))))
    `(default ((t (:background ,bg1 :foreground ,fg1))))
    `(default-italic ((t (:italic t))))
    `(ffap ((t (:foreground ,fg4))))
    `(font-latex-bold-face ((t (:foreground ,type))))
    `(font-latex-italic-face ((t (:foreground ,var :italic t))))
    `(font-latex-match-reference-keywords ((t (:foreground ,const))))
    `(font-latex-match-variable-keywords ((t (:foreground ,var))))
    `(font-latex-string-face ((t (:foreground ,str))))
    `(font-lock-builtin-face ((t (:foreground ,builtin))))
    `(font-lock-comment-face ((t (:foreground ,comment))))
    `(font-lock-constant-face ((t (:foreground ,const))))
    `(font-lock-doc-face ((t (:foreground ,comment))))
    `(font-lock-function-name-face ((t (:foreground ,fg5))))
    `(font-lock-keyword-face ((t (:bold t :foreground ,builtin))))
    `(font-lock-negation-char-face ((t (:foreground ,const))))
    `(font-lock-reference-face ((t (:foreground ,const))))
    `(font-lock-string-face ((t (:foreground ,str))))
    `(font-lock-type-face ((t (:bold :foreground ,fg5))))
    `(font-lock-variable-name-face ((t (:foreground ,var))))
    `(font-lock-warning-face ((t (:foreground ,warning :background ,bg2))))
    `(fringe ((t (:background ,bg1 :foreground ,fg4))))
    `(gnus-header-content ((t (:foreground ,keyword))))
    `(gnus-header-from ((t (:foreground ,var))))
    `(gnus-header-name ((t (:foreground ,type))))
    `(gnus-header-subject ((t (:foreground ,func :bold t))))
    `(helm-bookmark-w3m ((t (:foreground ,type))))
    `(helm-buffer-not-saved ((t (:foreground ,type :background ,bg1))))
    `(helm-buffer-process ((t (:foreground ,builtin :background ,bg1))))
    `(helm-buffer-saved-out ((t (:foreground ,fg1 :background ,bg1))))
    `(helm-buffer-size ((t (:foreground ,fg1 :background ,bg1))))
    `(helm-candidate-number ((t (:foreground ,bg1 :background ,fg1))))
    `(helm-ff-directory ((t (:foreground ,func :background ,bg1 :bold t))))
    `(helm-ff-executable ((t (:foreground ,var :background ,bg1))))
    `(helm-ff-file ((t (:foreground ,fg1 :background ,bg1 :weight normal))))
    `(helm-ff-invalid-symlink ((t (:foreground ,warning2 :background ,bg1 :bold t))))
    `(helm-ff-prefix ((t (:foreground ,bg1 :background ,keyword))))
    `(helm-ff-symlink ((t (:foreground ,keyword :background ,bg1 :bold t))))
    `(helm-grep-cmd-line ((t (:foreground ,fg1 :background ,bg1))))
    `(helm-grep-file ((t (:foreground ,fg1 :background ,bg1))))
    `(helm-grep-finish ((t (:foreground ,fg2 :background ,bg1))))
    `(helm-grep-lineno ((t (:foreground ,fg1 :background ,bg1))))
    `(helm-grep-match ((t (:foreground nil :background nil :inherit helm-match))))
    `(helm-grep-running ((t (:foreground ,func :background ,bg1))))
    `(helm-header ((t (:foreground ,fg2 :background ,bg1 :underline nil :box nil))))
    `(helm-moccur-buffer ((t (:foreground ,func :background ,bg1))))
    `(helm-selection ((t (:background ,bg2 :underline nil))))
    `(helm-selection-line ((t (:background ,bg2))))
    `(helm-separator ((t (:foreground ,type :background ,bg1))))
    `(helm-source-go-package-godoc-description ((t (:foreground ,str))))
    `(helm-source-header ((t (:foreground ,keyword :background ,bg1 :underline nil :bold t))))
    `(helm-time-zone-current ((t (:foreground ,builtin :background ,bg1))))
    `(helm-time-zone-home ((t (:foreground ,type :background ,bg1))))
    `(helm-visible-mark ((t (:foreground ,bg1 :background ,bg3))))
    `(highlight ((t (:bold :foreground ,fg3 :background ,bg4))))
    `(hl-line ((t ())))
    `(icompletep-determined ((t :foreground ,builtin)))
    `(ido-first-match ((t (:foreground ,keyword :bold t))))
    `(ido-only-match ((t (:foreground ,warning))))
    `(info-quoted-name ((t (:foreground ,builtin))))
    `(info-string ((t (:foreground ,str))))
    `(isearch ((t (:bold t :foreground ,warning))))
    `(ivy-current-match ((t (:foreground ,fg3 :inherit highlight :underline t))))
    `(jde-java-font-lock-constant-face ((t (:foreground ,const))))
    `(jde-java-font-lock-modifier-face ((t (:foreground ,fg2))))
    `(jde-java-font-lock-number-face ((t (:foreground ,var))))
    `(jde-java-font-lock-package-face ((t (:foreground ,var))))
    `(jde-java-font-lock-private-face ((t (:foreground ,keyword))))
    `(jde-java-font-lock-public-face ((t (:foreground ,keyword))))
    `(jde-jave-font-lock-protected-face ((t (:foreground ,keyword))))
    `(js2-external-variable ((t (:foreground ,type))))
    `(js2-function-param ((t (:foreground ,const))))
    `(js2-jsdoc-html-tag-delimiter ((t (:foreground ,str))))
    `(js2-jsdoc-html-tag-name ((t (:foreground ,var))))
    `(js2-jsdoc-value ((t (:foreground ,str))))
    `(js2-private-function-call ((t (:foreground ,const))))
    `(js2-private-member ((t (:foreground ,fg3))))
    `(js3-error-face ((t (:underline ,warning))))
    `(js3-external-variable-face ((t (:foreground ,var))))
    `(js3-function-param-face ((t (:foreground ,fg2))))
    `(js3-instance-member-face ((t (:foreground ,const))))
    `(js3-jsdoc-tag-face ((t (:foreground ,keyword))))
    `(js3-warning-face ((t (:underline ,keyword))))
    `(lazy-highlight ((t (:bold :foreground ,fg2 :background ,bg3))))
    `(line-number ((t (:background ,bg1 :foreground ,fg4))))
    `(line-number-current-line ((t (:background ,bg1 :foreground ,fg1))))
    `(link ((t (:foreground ,const :underline t))))
    `(magit-branch ((t (:foreground ,const :bold t))))
    `(magit-diff-context-highlight ((t (:background ,bg3 :foreground ,fg3))))
    `(magit-diffstat-added   ((t (:foreground ,type))))
    `(magit-diffstat-removed ((t (:foreground ,var))))
    `(magit-hash ((t (:foreground ,fg2))))
    `(magit-tag ((t (:foreground ,fg2 :background ,bg1))))
    `(magit-hunk-heading           ((t (:background ,bg3))))
    `(magit-hunk-heading-highlight ((t (:background ,bg3))))
    `(magit-item-highlight ((t :background ,bg3)))
    `(magit-log-author ((t (:foreground ,fg3))))
    `(magit-process-ng ((t (:foreground ,warning :bold t))))
    `(magit-process-ok ((t (:foreground ,func :bold t))))
    `(magit-section-heading        ((t (:foreground ,keyword :background ,bg1 :bold))))
    `(magit-section-highlight ((t (:background ,bg2))))
    `(magit-diff-hunk-heading ((t (:background ,bg2))))
    `(diff-header ((t (:background ,bg2))))
    `(diff-file-header ((t (:bold :background ,bg2))))
    `(minibuffer-prompt ((t (:foreground ,builtin))))
    `(mode-line ((t (:foreground ,fg1 :background ,bg3 :box (:line-width 4 :color ,bg3)))))
    `(mode-line-buffer-id ((t (:foreground ,func :background unspecified))))
    `(mode-line-emphasis ((t (:foreground ,fg1))))
    `(mode-line-highlight ((t (:foreground ,keyword))))
    `(mode-line-inactive ((t (:foreground ,var :background ,bg2 :weight normal :box (:line-width 4 :color ,bg2)))))
    `(mu4e-cited-1-face ((t (:foreground ,fg2))))
    `(mu4e-cited-7-face ((t (:foreground ,fg3))))
    `(mu4e-header-marks-face ((t (:foreground ,type))))
    `(mu4e-view-url-number-face ((t (:foreground ,type))))
    `(org-agenda-date ((t (:foreground ,var :height 1.1 ))))
    `(org-agenda-date-today ((t (:bold t :foreground ,keyword :height 1.4))))
    `(org-agenda-date-weekend ((t (:weight normal :foreground ,fg4))))
    `(org-agenda-done ((t (:foreground ,bg4))))
    `(org-agenda-structure ((t (:bold t :foreground ,fg3 :box (:color ,fg4) :background ,bg3))))
    `(org-block ((t (:foreground ,fg3))))
    `(org-code ((t (:foreground ,fg2))))
    `(org-date ((t (:underline t :foreground ,var) )))
    `(org-document-info-keyword ((t (:foreground ,func))))
    `(org-done ((t (:box (:line-width 1 :color ,bg3) :bold t :foreground ,bg4))))
    `(org-ellipsis ((t (:foreground ,builtin))))
    `(org-footnote  ((t (:underline t :foreground ,fg4))))
    `(org-hide ((t (:foreground ,fg4))))
    `(org-level-1 ((t (:bold t :foreground ,fg2 :height 1.1))))
    `(org-level-2 ((t (:foreground ,fg3))))
    `(org-level-3 ((t (:bold t :foreground ,fg4))))
    `(org-level-4 ((t (:foreground ,bg4))))
    `(org-link ((t (:underline t :foreground ,type ))))
    `(org-quote ((t (:inherit org-block :slant italic))))
    `(org-scheduled ((t (:foreground ,type))))
    `(org-scheduled-today ((t (:foreground ,func :bold t :height 1.2))))
    `(org-sexp-date ((t (:foreground ,fg4))))
    `(org-special-keyword ((t (:foreground ,func))))
    `(org-todo ((t (:box (:line-width 1 :color ,fg3) :foreground ,keyword :bold t))))
    `(org-verbatim ((t (:foreground ,fg4))))
    `(org-verse ((t (:inherit org-block :slant italic))))
    `(org-warning ((t (:underline t :foreground ,warning))))
    `(rainbow-delimiters-depth-1-face ((t :foreground ,fg1)))
    `(rainbow-delimiters-depth-2-face ((t :foreground ,type)))
    `(rainbow-delimiters-depth-3-face ((t :foreground ,var)))
    `(rainbow-delimiters-depth-4-face ((t :foreground ,const)))
    `(rainbow-delimiters-depth-5-face ((t :foreground ,keyword)))
    `(rainbow-delimiters-depth-6-face ((t :foreground ,fg1)))
    `(rainbow-delimiters-depth-7-face ((t :foreground ,type)))
    `(rainbow-delimiters-depth-8-face ((t :foreground ,var)))
    `(rainbow-delimiters-unmatched-face ((t :foreground ,warning)))
    `(region ((t (:background ,bg3))))
    `(show-paren-match-face ((t (:background ,warning))))
    `(slime-repl-inputed-output-face ((t (:foreground ,type))))
    `(tab-line ((t (:inherit fringe :box (:line-width 4 :color ,bg2)))))
    `(tab-line-highlight ((t (:background ,bg1 :foreground ,fg2 :box (:line-width 4 :color ,bg1)))))
    `(tab-line-tab ((t (:inherit tab-line))))
    `(tab-line-tab-current  ((t (:background ,bg4 :foreground ,fg1 :box (:line-width 4 :color ,bg4)))))
    `(tab-line-tab-inactive ((t (:inherit tab-line :foreground ,comment))))
    `(tabbar-button ((t (:background ,bg1 :foreground ,bg1 ))))
    `(tabbar-default ((t (:background ,bg1))))
    `(tabbar-highlight ((t (:background ,bg1 :foreground ,warning2 ))))
    `(tabbar-modified ((t (:background ,bg1 :foreground ,warning2 ))))
    `(tabbar-selected ((t (:background ,bg1 :foreground ,fg1 ))))
    `(tabbar-selected-modified ((t (:background ,bg1 :foreground ,keyword ))))
    `(tabbar-separator ((t (:foreground ,builtin ))))
    `(tabbar-unselected ((t (:background ,bg1 :foreground ,builtin ))))
    `(term ((t (:foreground ,fg1 :background ,bg1))))
    `(term-color-black ((t (:foreground ,fg2 :background undefined))))
    `(term-color-blue ((t (:foreground ,func :background ,func))))
    `(term-color-cyan ((t (:foreground ,builtin :background ,builtin))))
    `(term-color-green ((t (:foreground ,str :background ,bg3))))
    `(term-color-magenta ((t (:foreground ,builtin :background ,builtin))))
    `(term-color-red ((t (:foreground ,keyword :background ,bg3))))
    `(term-color-white ((t (:foreground ,fg2 :background ,fg2))))
    `(term-color-yellow ((t (:foreground ,var :background ,var))))
    `(trailing-whitespace ((t :foreground unspecified :background ,warning)))
    `(treemacs-fringe-indicator-face ((t (:background ,bg2 :foreground ,fg1))))
    `(treemacs-hl-line-face ((t (:background ,bg3 :bold t))))
    `(treemacs-window-background-face ((t (:background ,bg2))))
    `(undo-tree-visualizer-current-face ((t :foreground ,builtin)))
    `(undo-tree-visualizer-default-face ((t :foreground ,fg2)))
    `(undo-tree-visualizer-register-face ((t :foreground ,type)))
    `(undo-tree-visualizer-unmodified-face ((t :foreground ,var)))
    `(vertical-border ((t (:foreground ,fg3))))
    `(warning ((t (:foreground ,warning))))
    `(web-mode-builtin-face ((t (:inherit ,font-lock-builtin-face))))
    `(web-mode-comment-face ((t (:inherit ,font-lock-comment-face))))
    `(web-mode-constant-face ((t (:inherit ,font-lock-constant-face))))
    `(web-mode-doctype-face ((t (:inherit ,font-lock-comment-face))))
    `(web-mode-function-name-face ((t (:inherit ,font-lock-function-name-face))))
    `(web-mode-html-attr-name-face ((t (:foreground ,func))))
    `(web-mode-html-attr-value-face ((t (:foreground ,keyword))))
    `(web-mode-html-tag-face ((t (:foreground ,builtin))))
    `(web-mode-keyword-face ((t (:foreground ,keyword))))
    `(web-mode-string-face ((t (:foreground ,str))))
    `(web-mode-type-face ((t (:inherit ,font-lock-type-face))))
    `(whitespace-big-indent ((t (:background ,bg3 :foreground ,fg1))))
    `(whitespace-empty ((t (:background ,bg4 :foreground ,warning))))
    `(whitespace-hspace ((t (:foreground ,fg4 :background ,bg1))))
    `(whitespace-indentation ((t (:background ,bg3 :foreground ,keyword))))
    `(whitespace-missing-newline-at-eof ((t (:foreground ,keyword :background ,bg2))))
    `(whitespace-space ((t (:foreground ,fg4 :background ,bg1))))
    `(whitespace-tab ((t (:foreground ,fg4 :background ,bg1))))
    `(whitespace-trailing ((t (:background ,warning :foreground ,fg1 :bold t))))
    `(window-divider ((t (:foreground ,bg2))))
    `(web-mode-warning-face ((t (:inherit ,font-lock-warning-face))))
    ))

;; Check if the variable `byte-compile-last-position` is bound before using it
(if (boundp 'byte-compile-last-position)
  (setq byte-compile-last-position nil))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
    (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'dt-github)

;; Local Variables:
;; no-byte-compile: t
;; indent-tabs-mode: nil
;; eval: (when (fboundp 'rainbow-mode) (rainbow-mode +1))
;; End:
