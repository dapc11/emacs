(deftheme dt-github)
(let
  ((class '((class color) (min-colors 89)))
    (fg1      "#e1e4e8")
    (fg2      "#d1d5da")
    (fg3      "#bdc0c3")
    (fg4      "#444d56")
    (bg1      "#24292e")
    (bg2      "#2f363d")
    (bg3      "#39414a")
    (bg4      "#444d56")
    (builtin  "#79b8ff")
    (keyword  "#f97583")
    (const    "#e1e4e8")
    (comment  "#6b737e")
    (func     "#b392f0")
    (str      "#79b8ff")
    (type     "#b392f0")
    (var      "#e1e4e8")
    (warning  "#ffea7f")
    (warning2 "#ffab70")
    )
  (custom-theme-set-faces 'dt-github
    `(ac-completion-face ((,class (:underline t :foreground ,keyword))))
    `(cursor ((,class (:background ,fg1))))
    `(ffap ((,class (:foreground ,fg4))))
    `(font-latex-bold-face ((,class (:foreground ,type))))
    `(font-latex-italic-face ((,class (:foreground ,var :italic t))))
    `(font-latex-match-reference-keywords ((,class (:foreground ,const))))
    `(font-latex-match-variable-keywords ((,class (:foreground ,var))))
    `(font-latex-string-face ((,class (:foreground ,str))))
    `(font-lock-constant-face ((,class (:foreground ,const))))
    `(font-lock-negation-char-face ((,class (:foreground ,const))))
    `(font-lock-reference-face ((,class (:foreground ,const))))
    `(fringe ((,class (:background ,bg1 :foreground ,fg4))))
    `(gnus-header-content ((,class (:foreground ,keyword))))
    `(gnus-header-from ((,class (:foreground ,var))))
    `(gnus-header-name ((,class (:foreground ,type))))
    `(gnus-header-subject ((,class (:foreground ,func :bold t))))
    `(hl-line ((,class (:background  ,bg2))))
    `(icompletep-determined ((,class :foreground ,builtin)))
    `(ido-first-match ((,class (:foreground ,keyword :bold t))))
    `(ido-only-match ((,class (:foreground ,warning))))
    `(info-quoted-name ((,class (:foreground ,builtin))))
    `(info-string ((,class (:foreground ,str))))
    `(js2-external-variable ((,class (:foreground ,type))))
    `(js2-jsdoc-html-tag-delimiter ((,class (:foreground ,str))))
    `(js2-jsdoc-html-tag-name ((,class (:foreground ,var))))
    `(js2-private-function-call ((,class (:foreground ,const))))
    `(mode-line-highlight ((,class (:foreground ,keyword))))
    `(mu4e-cited-1-face ((,class (:foreground ,fg2))))
    `(mu4e-cited-7-face ((,class (:foreground ,fg3))))
    `(mu4e-header-marks-face ((,class (:foreground ,type))))
    `(mu4e-view-url-number-face ((,class (:foreground ,type))))
    `(org-code ((,class (:foreground ,fg2))))
    `(org-ellipsis ((,class (:foreground ,builtin))))
    `(org-scheduled ((,class (:foreground ,type))))
    `(org-sexp-date ((,class (:foreground ,fg4))))
    `(org-verbatim ((,class (:foreground ,fg4))))
    `(slime-repl-inputed-output-face ((,class (:foreground ,type))))
    `(vertical-border ((,class (:foreground ,fg3))))
    `(warning ((,class (:foreground ,warning))))
    `(ag-hit-face ((t (:foreground ,builtin))))
    `(bm-face ((t (:background ,bg2, :weight bold))))
    `(bm-fringe-face ((t (:background ,bg2, :weight bold))))
    `(bm-fringe-persistent-face ((t (:background ,bg2, :weight bold))))
    `(bm-persistent-face ((t (:background ,bg2, :weight bold))))
    `(company-echo-common ((,class (:foreground ,bg1 :background ,fg1))))
    `(company-preview ((,class (:background ,bg1 :foreground ,var))))
    `(company-preview-common ((,class (:foreground ,bg2 :foreground ,fg3))))
    `(company-preview-search ((,class (:foreground ,type :background ,bg1))))
    `(company-scrollbar-bg ((,class (:background ,bg3))))
    `(company-scrollbar-fg ((,class (:foreground ,keyword))))
    `(company-template-field ((,class (:inherit region))))
    `(company-tooltip ((,class (:foreground ,fg2 :background ,bg1 :bold t))))
    `(company-tooltip-common ((,class ( :foreground ,fg3))))
    `(company-tooltip-common-selection ((,class (:foreground ,str))))
    `(company-tooltip-mouse ((,class (:inherit highlight))))
    `(company-tooltip-selection ((,class (:background ,bg3 :foreground ,fg3))))
    `(company-tooltop-annotation ((,class (:foreground ,const))))
    `(compilation-column-number ((t (:foreground ,fg1))))
    `(compilation-info ((t (:foreground ,builtin))))
    `(compilation-line-number ((t (:foreground ,fg1))))
    `(compilation-mode-line-fail ((t (:foreground ,keyword))))
    `(default ((,class (:background ,bg1 :foreground ,fg1))))
    `(default-italic ((,class (:italic t))))
    `(font-lock-builtin-face ((,class (:foreground ,builtin))))
    `(font-lock-comment-face ((,class (:foreground ,comment))))
    `(font-lock-doc-face ((,class (:foreground ,comment))))
    `(font-lock-function-name-face ((,class (:foreground ,func ))))
    `(font-lock-keyword-face ((,class (:bold ,class :foreground ,keyword))))
    `(font-lock-string-face ((,class (:foreground ,str))))
    `(font-lock-type-face ((,class (:foreground ,type ))))
    `(font-lock-variable-name-face ((,class (:foreground ,var))))
    `(font-lock-warning-face ((,class (:foreground ,warning :background ,bg2))))
    `(helm-bookmark-w3m ((,class (:foreground ,type))))
    `(helm-buffer-not-saved ((,class (:foreground ,type :background ,bg1))))
    `(helm-buffer-process ((,class (:foreground ,builtin :background ,bg1))))
    `(helm-buffer-saved-out ((,class (:foreground ,fg1 :background ,bg1))))
    `(helm-buffer-size ((,class (:foreground ,fg1 :background ,bg1))))
    `(helm-candidate-number ((,class (:foreground ,bg1 :background ,fg1))))
    `(helm-ff-directory ((,class (:foreground ,func :background ,bg1 :weight bold))))
    `(helm-ff-executable ((,class (:foreground ,var :background ,bg1 :weight normal))))
    `(helm-ff-file ((,class (:foreground ,fg1 :background ,bg1 :weight normal))))
    `(helm-ff-invalid-symlink ((,class (:foreground ,warning2 :background ,bg1 :weight bold))))
    `(helm-ff-prefix ((,class (:foreground ,bg1 :background ,keyword :weight normal))))
    `(helm-ff-symlink ((,class (:foreground ,keyword :background ,bg1 :weight bold))))
    `(helm-grep-cmd-line ((,class (:foreground ,fg1 :background ,bg1))))
    `(helm-grep-file ((,class (:foreground ,fg1 :background ,bg1))))
    `(helm-grep-finish ((,class (:foreground ,fg2 :background ,bg1))))
    `(helm-grep-lineno ((,class (:foreground ,fg1 :background ,bg1))))
    `(helm-grep-match ((,class (:foreground nil :background nil :inherit helm-match))))
    `(helm-grep-running ((,class (:foreground ,func :background ,bg1))))
    `(helm-header ((,class (:foreground ,fg2 :background ,bg1 :underline nil :box nil))))
    `(helm-moccur-buffer ((,class (:foreground ,func :background ,bg1))))
    `(helm-selection ((,class (:background ,bg2 :underline nil))))
    `(helm-selection-line ((,class (:background ,bg2))))
    `(helm-separator ((,class (:foreground ,type :background ,bg1))))
    `(helm-source-go-package-godoc-description ((,class (:foreground ,str))))
    `(helm-source-header ((,class (:foreground ,keyword :background ,bg1 :underline nil :weight bold))))
    `(helm-time-zone-current ((,class (:foreground ,builtin :background ,bg1))))
    `(helm-time-zone-home ((,class (:foreground ,type :background ,bg1))))
    `(helm-visible-mark ((,class (:foreground ,bg1 :background ,bg3))))
    `(highlight ((,class (:foreground ,fg3 :background ,bg3))))
    `(isearch ((,class (:bold t :foreground ,warning :background ,bg3))))
    `(ivy-current-match ((,class (:foreground ,fg3 :inherit highlight :underline t))))
    `(jde-java-font-lock-constant-face ((t (:foreground ,const))))
    `(jde-java-font-lock-modifier-face ((t (:foreground ,fg2))))
    `(jde-java-font-lock-number-face ((t (:foreground ,var))))
    `(jde-java-font-lock-package-face ((t (:foreground ,var))))
    `(jde-java-font-lock-private-face ((t (:foreground ,keyword))))
    `(jde-java-font-lock-public-face ((t (:foreground ,keyword))))
    `(jde-jave-font-lock-protected-face ((t (:foreground ,keyword))))
    `(js2-function-param ((,class (:foreground ,const))))
    `(js2-jsdoc-value ((,class (:foreground ,str))))
    `(js2-private-member ((,class (:foreground ,fg3))))
    `(js3-error-face ((,class (:underline ,warning))))
    `(js3-external-variable-face ((,class (:foreground ,var))))
    `(js3-function-param-face ((,class (:foreground ,fg2))))
    `(js3-instance-member-face ((,class (:foreground ,const))))
    `(js3-jsdoc-tag-face ((,class (:foreground ,keyword))))
    `(js3-warning-face ((,class (:underline ,keyword))))
    `(lazy-highlight ((,class (:foreground ,fg2 :background ,bg3))))
    `(line-number ((t (:background ,bg1 :foreground ,fg4))))
    `(line-number-current-line ((t (:background ,bg1 :foreground ,fg1))))
    `(link ((,class (:foreground ,const :underline t))))
    `(magit-branch ((,class (:foreground ,const :weight bold))))
    `(magit-diff-context-highlight ((,class (:background ,bg3 :foreground ,fg3))))
    `(magit-diff-file-header ((,class (:foreground ,fg2 :background ,bg3))))
    `(magit-diffstat-added   ((,class (:foreground ,type))))
    `(magit-diffstat-removed ((,class (:foreground ,var))))
    `(magit-hash ((,class (:foreground ,fg2))))
    `(magit-hunk-heading           ((,class (:background ,bg3))))
    `(magit-hunk-heading-highlight ((,class (:background ,bg3))))
    `(magit-item-highlight ((,class :background ,bg3)))
    `(magit-log-author ((,class (:foreground ,fg3))))
    `(magit-process-ng ((,class (:foreground ,warning :weight bold))))
    `(magit-process-ok ((,class (:foreground ,func :weight bold))))
    `(magit-section-heading        ((,class (:foreground ,keyword :weight bold))))
    `(magit-section-highlight      ((,class (:background ,bg2))))
    `(minibuffer-prompt ((,class (:foreground ,keyword))))
    `(mode-line ((,class (:foreground ,fg1 :background ,bg3 :box (:line-width 4 :color ,bg3)))))
    `(mode-line-buffer-id ((,class (:foreground ,func :background nil))))
    `(mode-line-emphasis ((,class (:foreground ,fg1))))
    `(mode-line-inactive ((,class (:foreground ,var :background ,bg2 :weight normal :box (:line-width 4 :color ,bg2)))))
    `(org-agenda-date ((,class (:foreground ,var :height 1.1 ))))
    `(org-agenda-date-today ((,class (:weight bold :foreground ,keyword :height 1.4))))
    `(org-agenda-date-weekend ((,class (:weight normal :foreground ,fg4))))
    `(org-agenda-done ((,class (:foreground ,bg4))))
    `(org-agenda-structure ((,class (:weight bold :foreground ,fg3 :box (:color ,fg4) :background ,bg3))))
    `(org-block ((,class (:foreground ,fg3))))
    `(org-date ((,class (:underline t :foreground ,var) )))
    `(org-document-info-keyword ((,class (:foreground ,func))))
    `(org-done ((,class (:box (:line-width 1 :color ,bg3) :bold t :foreground ,bg4))))
    `(org-footnote  ((,class (:underline t :foreground ,fg4))))
    `(org-hide ((,class (:foreground ,fg4))))
    `(org-level-1 ((,class (:bold t :foreground ,fg2 :height 1.1))))
    `(org-level-2 ((,class (:bold nil :foreground ,fg3))))
    `(org-level-3 ((,class (:bold t :foreground ,fg4))))
    `(org-level-4 ((,class (:bold nil :foreground ,bg4))))
    `(org-link ((,class (:underline t :foreground ,type ))))
    `(org-quote ((,class (:inherit org-block :slant italic))))
    `(org-scheduled-today ((,class (:foreground ,func :weight bold :height 1.2))))
    `(org-special-keyword ((,class (:foreground ,func))))
    `(org-todo ((,class (:box (:line-width 1 :color ,fg3) :foreground ,keyword :bold t))))
    `(org-verse ((,class (:inherit org-block :slant italic))))
    `(org-warning ((,class (:underline t :foreground ,warning))))
    `(rainbow-delimiters-depth-1-face ((,class :foreground ,fg1)))
    `(rainbow-delimiters-depth-2-face ((,class :foreground ,type)))
    `(rainbow-delimiters-depth-3-face ((,class :foreground ,var)))
    `(rainbow-delimiters-depth-4-face ((,class :foreground ,const)))
    `(rainbow-delimiters-depth-5-face ((,class :foreground ,keyword)))
    `(rainbow-delimiters-depth-6-face ((,class :foreground ,fg1)))
    `(rainbow-delimiters-depth-7-face ((,class :foreground ,type)))
    `(rainbow-delimiters-depth-8-face ((,class :foreground ,var)))
    `(rainbow-delimiters-unmatched-face ((,class :foreground ,warning)))
    `(region ((,class (:background ,bg4))))
    `(show-paren-match-face ((,class (:background ,warning))))
    `(tab-line ((,class (:inherit fringe :box (:line-width 4 :color ,bg2)))))
    `(tab-line-highlight    ((,class (:background ,bg1 :foreground ,fg2 :box (:line-width 4 :color ,bg1)))))
    `(tab-line-tab ((,class (:inherit tab-line))))
    `(tab-line-tab-current  ((,class (:background ,bg4 :foreground ,fg1 :box (:line-width 4 :color ,bg4)))))
    `(tab-line-tab-inactive ((,class (:inherit tab-line :foreground ,comment))))
    `(tabbar-button ((,class (:background ,bg1 :foreground ,bg1 ))))
    `(tabbar-default ((,class (:background ,bg1))))
    `(tabbar-highlight ((,class (:background ,bg1 :foreground ,warning2 ))))
    `(tabbar-modified ((,class (:background ,bg1 :foreground ,warning2 ))))
    `(tabbar-selected ((,class (:background ,bg1 :foreground ,fg1 ))))
    `(tabbar-selected-modified ((,class (:background ,bg1 :foreground ,keyword ))))
    `(tabbar-separator ((,class (:foreground ,builtin ))))
    `(tabbar-unselected ((,class (:background ,bg1 :foreground ,builtin ))))
    `(term ((,class (:foreground ,fg1 :background ,bg1))))
    `(term-color-black ((,class (:foreground ,bg3 :background ,bg3))))
    `(term-color-black ((,class (:foreground ,fg2 :background nil))))
    `(term-color-blue ((,class (:foreground ,func :background ,func))))
    `(term-color-cyan ((,class (:foreground ,str :background ,str))))
    `(term-color-green ((,class (:foreground ,type :background ,bg3))))
    `(term-color-magenta ((,class (:foreground ,builtin :background ,builtin))))
    `(term-color-red ((,class (:foreground ,keyword :background ,bg3))))
    `(term-color-white ((,class (:foreground ,fg2 :background ,fg2))))
    `(term-color-yellow ((,class (:foreground ,var :background ,var))))
    `(trailing-whitespace ((,class :foreground nil :background ,warning)))
    `(undo-tree-visualizer-current-face ((,class :foreground ,builtin)))
    `(undo-tree-visualizer-default-face ((,class :foreground ,fg2)))
    `(undo-tree-visualizer-register-face ((,class :foreground ,type)))
    `(undo-tree-visualizer-unmodified-face ((,class :foreground ,var)))
    `(web-mode-builtin-face ((,class (:inherit ,font-lock-builtin-face))))
    `(web-mode-comment-face ((,class (:inherit ,font-lock-comment-face))))
    `(web-mode-constant-face ((,class (:inherit ,font-lock-constant-face))))
    `(web-mode-doctype-face ((,class (:inherit ,font-lock-comment-face))))
    `(web-mode-function-name-face ((,class (:inherit ,font-lock-function-name-face))))
    `(web-mode-html-attr-name-face ((,class (:foreground ,func))))
    `(web-mode-html-attr-value-face ((,class (:foreground ,keyword))))
    `(web-mode-html-tag-face ((,class (:foreground ,builtin))))
    `(web-mode-keyword-face ((,class (:foreground ,keyword))))
    `(web-mode-string-face ((,class (:foreground ,str))))
    '(treemacs-fringe-indicator-face ((t (:background ,bg2 :foreground "#e1e4e8"))))
    '(treemacs-hl-line-face ((,class (:background ,bg4 :weight bold))))
    '(treemacs-window-background-face ((,class (:background ,bg2))))
    '(whitespace-big-indent ((,class (:background ,keyword :foreground ,keyword))))
    '(whitespace-empty ((,class (:extend t :background ,warning :foreground ,keyword))))
    '(whitespace-hspace ((,class (:background ,bg1 :foreground ,bg3))))
    '(whitespace-indentation ((,class (:background ,warning :foreground ,keyword))))
    '(whitespace-missing-newline-at-eof ((,class (:background ,warning :foreground "#181818"))))
    '(whitespace-space ((,class (:background ,bg4))))
    '(whitespace-space-after-tab ((,class (:background ,warning :foreground ,keyword))))
    '(whitespace-space-before-tab ((,class (:background ,warning2 :foreground ,keyword))))
    '(whitespace-tab ((,class (:background ,bg1 :foreground ,bg3))))
    '(whitespace-trailing ((,class (:background ,keyword :foreground ,warning :weight bold))))
    '(window-divider ((,class (:foreground ,bg2))))
    `(web-mode-type-face ((,class (:inherit ,font-lock-type-face))))
    `(web-mode-warning-face ((,class (:inherit ,font-lock-warning-face))))
    ))

;; Check if the variable `byte-compile-last-position` is bound before using it
(if (boundp 'byte-compile-last-position)
  (setq byte-compile-last-position nil))

;;;###autoload
(when load-file-name
  (add-to-list 'custom-theme-load-path
    (file-name-as-directory (file-name-directory load-file-name))))

(provide-theme 'dt-github)
